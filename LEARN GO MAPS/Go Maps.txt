# GO MAPS
---------

* Introduction to Maps
----------------------
Think of a list of contacts on a phone. We can search by name to find the associated phone number. In programming, we often need to connect one data piece with another. This association 
is what maps are perfect for!

A map is an unordered collection of keys and values. Here is an example of connecting a key of type string with a value of type int:

Key	Value
Joe	2126778723
Angela	4089978763
Shawn	3143776876
Terell	5026754531

We are able to access map values by looking them up with a key. Unlike an array, values in a map are not accessed by indices. Maps allow for very fast lookups by organizing the values for 
retrieval.

We use maps for tasks such as:

	. Counting the number of times unique names appear in a list.
	. Mapping simple identifiers, such as an employee id, to related values.
	. Anytime we need to associate any piece of data with another!

Throughout this lesson, we will introduce:

	. Creating maps
	. Accessing map values
	. Adding and modifying values
	. Removing key-value pairs

To begin using maps, we will first have to create them. We will get started in the next exercise!

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve provided an example of a map! Try running the program and look at the output.

maps.go
-------
package main

import "fmt"

func main() {
	// Create a simple contact list.
	contacts := map[string]int{
		"Joe":    2126778723,
		"Angela": 4089978763,
		"Shawn":  3143776876,
		"Terell": 5026754531,
	}
	// Print out all the contacts
	fmt.Println(contacts)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Map Creation
--------------
In Go, there are two ways to create a map. We’ll be covering both in this exercise.

* Creating a map with make
--------------------------
We can use the make function to create an empty map. The format is:

	variableName := make(map[keyType]valueType)

For example, we could create an empty map of product name to price:

	prices := make(map[string]float32)

Creating empty maps is useful when we don’t know what the content of our map will be. But sometimes the content of the map is known ahead of time.

* Creating a map with values
----------------------------
If we know some map values, we can specify them as follows:

variableName := map[keyType]valueType{
    name1: value1,
    name2: value2,
    name3: value3,
}

For example, we can create a contact list with:

contacts := map[string]int{
    "Joe":    2126778723,
    "Angela": 4089978763,
    "Shawn":  3143776876,
    "Terell": 5026754531,
}

We’ve learned how to create our maps, but how do we access the elements within them? We’ll do that in the next exercise. Before that, let’s practice creating some maps!

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s create some code to run a donut shop.

Use the make syntax to create a map named orders with a string key type and float32 value type. We can use orders to keep track of how much our customers are spending.

Then use the fmt.Println function to print out your empty map of orders.


Hint
We could create an empty map of employee name to employee id like so:

employees := make(map[string]int)
fmt.Println(employees)

Checkpoint 2 Passed
2.
We need to keep track of our donut inventory!

Create a map donuts with a key type of string and a value of int. Use the following table for the map’s values:

Kind	Count
frosted	10
chocolate	15
jelly	8
Then, use the fmt.Println function to print out your map of donut inventory.


Hint
When the initial map key-value pairs are known, we use the initializer syntax. So for example to keep track of supplies:

supplies := map[string]int{
    "napkins":    500,
    "straws":     200,
    "large cups": 100,
}
fmt.Println(supplies)

maps.go
-------
package main

import "fmt"

func main() {
  // Add your code here
  orders := make(map[string]float32)
  fmt.Println(orders)

  donuts := map[string]int {
    "frosted": 10,
    "chocolate": 15,
    "jelly": 8,
  }
  fmt.Println(donuts)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Accessing values in the Map
-----------------------------
Maps make it easy to look up values and store the value in a variable for further use:

	variable := yourMap[keyValue]

But what happens if we never added the requested key-value pair to the map but try to look it up?

If a key is not in the map, a default value for value type is returned. We can also get a second return value to determine if the key is in the map.

customer,status := customers["billy"]

if status {
  fmt.Println("we found the customer")
} else {
  fmt.Println("no such customer!")
}

Notice how we have a boolean called status that we can check. When status is true, the key was found in our map!

Now we know how to access values in our maps. But how do we add or change these values? We will do that in the next exercise but let’s first practice accessing maps.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s create a variable called firstChoice that will store the value contained at the key frosted in donuts.

Then let’s print out the value of firstChoice.


Hint
If we were looking up how many napkins we have in our stockroom:

item = supplies["napkins"]
fmt.Println(item)

Checkpoint 2 Passed
2.
Now let’s see what happens when we don’t sell some kind of donut. Let’s look up bavarian cream and save the count and status in secondChoice,status.

Then let’s print out the value of secondChoice with fmt.Println.

And finally, print out the value of status with another print statement.


Hint
If we want to look up a customer’s balance and status if the customer is in our map:

balance,status = customers["Johnson"]
fmt.Println(balance)

Checkpoint 3 Passed
3.
Next let’s add an if-then statement.

Print out the number of donuts if the status is true and otherwise print We do not sell that donut!


Hint
For a customer balance lookup this would be:

balance,status = customers["Johnson"]
if status {
  fmt.Println(balance)
} else {
  fmt.Println("No customer found with that name!")
}

maps.go
-------
package main
import "fmt"

func main() {
  donuts := map[string]int{
    "frosted":   10,
    "chocolate": 15,
    "jelly":     8,
  }
   
  // Print out the inventory
  fmt.Println(donuts) 
   
  // Add your code here
  firstChoice := donuts["frosted"]
  fmt.Println(firstChoice)

  secondChoice,status := donuts["bavarian cream"]
  fmt.Println(secondChoice)
  fmt.Println(status)
  if status {
    fmt.Println(secondChoice)
  } else {
    fmt.Println("We do not sell that donut!")
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Adding and Modifying
----------------------
Maps are also easy to add key-value pairs or to change the value of an existing pair. In both cases we specify the map name, the key, and the value:

	yourMap[newKey] = newValue

So to add a new customer balance, we could do:

	customers["Samantha"] =  1.25

We can use the same format to change an existing value. The format is the same! So when Samantha buys another donut:

	customers["Samantha"] =  2.75

We now have the ability to add and update values in our maps. In the next exercise, we’ll learn how to remove key-value pairs. Before then let’s practice adding and updating!

* Instructions
--------------
Checkpoint 1 Passed
1.
Imagine our baker bringing out a tray of 12 fresh glazed donuts. Let’s add 12 donuts under the key glazed into our map.

After we add, print out the value of the glazed key.


Hint
If we were adding a new employee Jerry and a new id 5001:

employees["Jerry"] =  5001
fmt.Println(employees["Jerry"])

Checkpoint 2 Passed
2.
Next, update count of the jelly key to be 3.

Then print out the map.


Hint
If we were modifying our inventory from the current value to 25 then print out the map:

inventory["straws"] =  25
fmt.Println(inventory)

maps.go
-------
package main
import "fmt"

func main() {
  donuts := map[string]int{
    "frosted":   10,
    "chocolate": 15,
    "jelly":     8,
  }

  // Print out all the donuts
  fmt.Println(donuts)

  // Add your code here
  donuts["glazed"] = 12
  fmt.Println(donuts["glazed"])
  donuts["jelly"] = 3
  fmt.Println(donuts)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Removing
----------
Sometimes we have a key that we no longer need in our map. Go allows us to remove elements using the delete function:

	delete(yourMap, keyValueToDelete)

Let’s say we want to remove a contact from our phone:

	delete(contacts, "Gary")

If we call the delete function with a key that is not in the map nothing bad happens. Other languages may crash or throw an exception!

Let’s practice the delete operation and then we will review everything that we have learned.

* Instructions
--------------
Checkpoint 1 Passed
1.
First, let’s delete all the chocolate donuts.


Hint
If we were removing an inventory item from our map the code would be:

delete(inventory, "small cups")

Checkpoint 2 Passed
2.
Then print out the donuts map again after your delete statement.


Hint
We would print out all customers with:

fmt.Println(customers)

maps.go
-------
package main
import "fmt"

func main() {
  donuts := map[string]int{
    "frosted":   10,
    "chocolate": 15,
    "jelly":     8,
  }
  fmt.Println(donuts)

  // Add your code here
  delete(donuts, "chocolate")
  fmt.Println(donuts)
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------












































































