# STRUCTS IN GO
---------------

* Introduction
--------------
We often have many variables related to each other, but managing using them all together can be a headache. Luckily, Go provides us with a way to group several variables into one custom 
data type. These types make the code cleaner, more intuitive, and less error-prone.

In Go, grouping together related variables is done using a struct. Throughout this lesson we will explore:

	. What a struct is

	. How to define a struct

	. How to access and modify a struct’s fields

	. How to write functions that work with structs

	. How to nest structs inside each other

With structs, we can define custom types that allow us to handle any kind of related data. To use these structs, we need to define what is inside of it. In the next exercise, we will 
discuss how to define structs we can use in our programs.

introduction.go
---------------
package main

import "fmt"

type Pet struct {
	name    string
	petType string
	age     int
}

func main() {
	nuggets := Pet{"Nuggets", "dog", 4}
	mittens := Pet{"Mittens", "cat", 7}
	robin := Pet{"Robin", "bird", 2}
	fmt.Println(nuggets)
	fmt.Println(mittens)
	fmt.Println(robin)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining a Struct
-------------------
We’ve just learned the importance of structs in grouping complex data types. But how do we define the structs we’ll use in our programs? In this exercise, we will introduce the syntax for 
defining structs.

The definition of a struct includes its name and its fields. A field is one of the internal variables inside a struct. We use the following template:

// Struct names begin with a capital letter in Go
type NameOfStruct struct {
  // Struct fields go here
}

Let’s say we want to define a 2D point with an x and y coordinate. We could define two variables x and y and use them throughout our program. However, using multiple related variables in 
this way is error-prone. We might use x when we mean y, and dealing with many points could cause confusion.

A better way to represent a 2D point is to create a struct called Point which contains both coordinates. Defining Point in this way logically groups together the relevant data types. We 
would define the struct for Point like so:

type Point struct {
  x int
  y int
}

Using this new type, we would be able to pass Point information around our program as a single variable!

Now that have our struct defined, we need to be able to use them. In the next exercise will learn to create instances of our defined structs. First, let’s practice defining them in our 
programs.

* Instructions
--------------
Checkpoint 1 Passed
1.
We are going to make a struct that holds country information!

Let’s get started by defining an empty struct called Country.

We will fill in the fields at later checkpoints.


Hint
Recall the template for defining a struct:

type Pet struct {
// Fields of Pet Go here
}

Checkpoint 2 Passed
2.
Inside the Country struct, define a field called name of type string.


Hint
We can define string fields like so:

type Random struct {
  name string
}

Checkpoint 3 Passed
3.
Now define a variable called capital of type string that will represent the name of the country’s capital.


Hint
Recall from earlier how we defined multiple fields inside of Point:

type Point struct {
  x int
  y int
}

Checkpoint 4 Passed
4.
Add two fields inside of Country, latitude and longitude, of type float32 that will represent a country’s position.


Hint
These variables are defined in the same way you would define an ordinary float32.

type SensorValue struct {
  temp float32
}

exercise2.go
------------
package main

import "fmt"

// Country struct goes here
type Country struct {
  name string
  capital string
  latitude float32
  longitude float32
}

func main() {
	var france Country
  fmt.Println(france)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating an Instance of a Struct
----------------------------------
We’ve defined our structs, but how do we create variables of that type? To use a struct we just defined, we have to create an instance of it. Assume we defined Point from the last 
exercise. We could create an instance of it like so:

p1 := Point{x: 10, y: 12}

or

var p1 = Point{x: 10, y: 12}

Using this syntax, we can define values for each of the struct’s fields. However, Go allows us to rely on default values as well. We can omit fields:

p1 := Point{x: 10}
// y will be set to 0

In fact, we can omit all fields to rely only on default values:

p1 := Point{}
// x and y will be set to 0

The order of our struct definition allows us to avoid labeling our fields. The values are assigned from left to right according to how the fields are defined in the struct from top to 
bottom.

p1 := Point{10, 12}
// Same as var p1 = Point{10, 12}

When not using labels, we must provide values for every field; otherwise, our code will not compile.

We’ve learned how to create struct instances, but how do we use them? In the next exercise, we will discover how to access and modify a struct’s values in our programs. For now, let’s 
practice creating some instances!

* Instructions
--------------
Checkpoint 1 Passed
1.
A local school needs our help organizing its data.

Given the struct Student, create an instance called peter which represents the student named Peter Bookman who is 16 years old and is in grade 11.

Print peter when finished.


Hint
Recall that creating an instance of a struct is done like so:

p1 := Point{x: 10, y: 12}

or

p1 := Point{10,  12}

Checkpoint 2 Passed
2.
Create a second instance of Student called scott which represents the student Scott Peterson who is in 12th grade (notice Scott’s age is not defined).

Print scott when finished.


Hint
Since age is not defined, we have to instantiate the struct with syntax similar to:

p1 := Point{x: 10}

exercise3.go
------------
package main

import "fmt"

type Student struct {
	firstName string
	lastName  string
	age       int
	grade     int
}

func main() {
	// Define your instances here
  peter := Student{"Peter", "Bookman", 16, 11}
  fmt.Println(peter)

  scott := Student{firstName: "Scott", lastName: "Peterson", grade: 12}
  fmt.Println(scott)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Accessing and Modifying Struct Variables
------------------------------------------
We’ve defined our struct and created an instance, it’s time to use them. In this exercise, we will explore how to access and modify a struct’s variables.

Let’s say we have an instance of the Student struct:

	john := Student{"John", "Smith", 14, 9}

We can access individual fields within struct using the name of the variable, a ., and the name of the field. We could access John’s first name like so:

	fmt.Println(john.firstName)

We can change the value of a field with an assignment statement:

	john.age = 15

John’s just turned 15!

Using field access and modification finally allows us to be able to use structs in calculations for our program.

Now let’s practice this concept!

* Instructions
--------------
Checkpoint 1 Passed
1.
Given the struct Restaurant, create an instance of it with the following initial values:

	. name: Codecademy Steakhouse
	. typeOfRestaurant: Japanese
	. yearEstablished: 2011

Call this instance restaurant.

Also, print out the restaurant instance.


Hint
Recall an instance of the Student struct is created and printed like so:

student1 := Student{"John", "Smith", 14, 9}
fmt.Println(student1)

Checkpoint 2 Passed
2.
Print the value of each field of restaurant on a separate line.


Hint
The fields for student1 were printed like so:

fmt.Println(student1.firstName)
fmt.Println(student1.lastName)
fmt.Println(student1.age)
fmt.Println(student1.grade)

restaurant should be printed in the same way.

Checkpoint 3 Passed
3.
Change the values of name to “Skillsoft Steakhouse” and yearEstablished to “2022”.


Hint
Recall that the age field for student1 was changed in the following way:

student1.age = 15

Checkpoint 4 Passed
4.
Print out the updated restaurant instance.


Hint
The student1 instance was printed like so:

fmt.Println(student1)

exercise4.go
------------
package main

import "fmt"

type Restaurant struct {
	name             string
	typeOfRestaurant string
	yearEstablished  int
}

func main() {

	// Add your code here.
  restaurant := Restaurant{"Codecademy Steakhouse", "Japanese", 2011}
  fmt.Println(restaurant)
  fmt.Println(restaurant.name)
  fmt.Println(restaurant.typeOfRestaurant)
  fmt.Println(restaurant.yearEstablished)
  restaurant.name = "Skillsoft Steakhouse"
  restaurant.yearEstablished = 2022
  fmt.Println(restaurant)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functions that Access a Struct
--------------------------------
We can use functions to capture logic involving our structs and simplify it.

Structs will often have important operations that can be performed on them. For example, with a struct representing a geometric shape, it would be natural to have functions that compute 
its area and perimeter.

Let’s say we have a struct describing a rectangle. The rectangle struct will contain two fields: the length and the width. We define this struct:

type Rectangle struct {
  length float32
  width  float32
}

We can define a function that computes the area of the rectangle; the product of the length and the width.

func (rectangle Rectangle) area() float32 {
  return rectangle.length * rectangle.width
}

The key thing to notice is the line (rectangle Rectangle). This line signals to Go that the area() function belongs to the Rectangle struct. Note that functions associated with a struct 
are written outside of the struct!

If we have an instance of Rectangle called rect, we can call the area() function like so:

	rect.area()

Defining a function in this way will only pass in a copy of the rectangle: that is, we will not be able to use the function to alter the value of a field!

If we want to write a function that allows us to modify the value of a struct field, we have to pass in a pointer to a struct. We will see how this works in the next exercise.

Before we modify our structs in functions, let’s practice writing basic struct functions!

* Instructions
--------------
Checkpoint 1 Passed
1.
Given the struct Triangle which represents a triangle by its base and height, write an associated function called area() that computes the area of a triangle. The area of a triangle is of type float32

The formula for the area of a triangle is:

	Area = 1/2 (base * height)

Hint
If we were to write a function for the Rectangle struct that computes the perimeter of a rectangle called perim, we would do it like so:

func (rect Rectangle) perim() float32 {
  return 2.0*rect.length + 2.0*rect.width
}

Checkpoint 2 Passed
2.
In main(), call the area() function and print the result.


Hint
If we were intialize a rectangle, call the function perim(), and print the value, we would do it like so:

rectangle := Rectangle{4.0, 2.0}
fmt.Println(rectangle.perim())

structs.go
----------
package main

import "fmt"

type Triangle struct {
	height float32
	base float32
}

// Checkpoint 1 code goes here
func (triangle Triangle) area() float32 {
  return (triangle.base * triangle.height)/2
}

func main() {

	triangle := Triangle{10, 4}
  fmt.Println(triangle)

	// Call the function here
  fmt.Println(triangle.area())
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Pointers to a Struct
----------------------
Without pointers, when a variable is passed into a function, only a copy of it is used inside the function. We can use pointers to modify values in our structs within a function. But how 
do we get a pointer to our struct?

Let’s explore this concept using the following struct as an example:

type Employee struct {
  firstName string
  lastName string
  age int
  title string
}

We must first create an instance of Employee and then we create a pointer that will point to this instance. This is done like so:

func main() {
  steve := Employee{“Steve”, “Stevens”, 34, “Junior Manager”}
  pointerToSteve := &steve
}

We can now use this pointer to change the values of the fields for steve. There are two ways to do this in Go:

(*pointerToSteve).firstName

Or a simpler, recommended method:

pointerToSteve.firstName

We can use these pointers to modify structs in our functions. Consider the following example:

func (rectangle *Rectangle) modify(newLength float32){
  rectangle.length = newLength
}

Notice that just inside the function modify() that rectangle is also a pointer. It is dereferenced without the use of the dereferencing operator just like pointerToSteve!

We now have the ability to change Struct values in our functions! Let’s get some practice in!

* Instructions
--------------
Checkpoint 1 Passed
1.
Write a function called updateBase() that will change the value of the base field of a Triangle instance.

After writing the function, call it within main. Set the new base to be 13.


Hint
Recall the function we wrote to update the value of a Rectangle is:

func (rectangle *Rectangle) modify(newLength float32){
    rectangle.length = newLength
}

structs.go
----------
package main

import "fmt"

type Triangle struct {
	height float32
	base float32
}

// Checkpoint 1 code goes here
func (triangle *Triangle) updateBase(newBase float32) {
  triangle.base = newBase
}

func main() {

  triangle := Triangle{10, 4}
  
  // Call the function here
  triangle.updateBase(13)

  fmt.Println(triangle)

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Arrays of Structs
-------------------
What can we do when dealing with many structs of the same type? We can use them in an array together! Let’s say we want to create an array of the following points: {1, 1} {7, 27} {12, 7} 
{9, 25}

We create an array of Points like so:

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

If the points have names, we can also create the array like this:

a = {1, 1}
b = {7, 27}
c = {12, 7}
d = {9, 25}

points := []Point{a, b, c, d}

We can access the contents of this array like we would for an ordinary array. We can also access and modify the fields of each of the array elements.

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

fmt.Println(points[0]) // Output will be {1, 1}

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

points[1].x = 8
points[1].y = 16

fmt.Println(points[1]) // Output will be {8, 16}

Arrays of structs allow us access many instances of our structs together in our programs! In the following checkpoints, we will practice working with arrays of structs.

* Instructions
--------------
Checkpoint 1 Passed
1.
Given the struct Cake which represents a cake, create an array of Cakes called cakes that will contain the information for the following cakes:

	. type: Chocolate, weight: 1000g
	. type: Carrot, weight: 500g
	. type Ice Cream, weight 2000g

Hint
Recall that we created an array of Points like so:

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

or

a = {1, 1}
b = {7, 27}
c = {12, 7}
d = {9, 25}

points := []Point{a, b, c, d}

Checkpoint 2 Passed
2.
Print the weight of the chocolate cake.


Hint
To do this, you would have to access the weight field of the position in cakes that contains the chocolate cake. Recall from the points example:

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

fmt.Println(points[1].y) // Output will be 27

Checkpoint 3 Passed
3.
Change the weight of the carrot cake from 500g to 1500g.


Hint
You can access the array element that contains the carrot cake and change the value of its weight field.

Recall to index a struct a specific index we used:

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

points[1].x = 8
points[1].y = 16
fmt.Println(points) // Output will be {8, 16}

structs.go
----------
package main

import "fmt"

type Cake struct {
	typeOfCake string
	weight int // Weight in grams
}

func main() {

	// Checkpoint 1 code goes here	
  cakes :=[]Cake{{"Chocolate", 1000}, {"Carrot", 500}, {"Ice Cream", 2000}}	
	// Checkpoint 2 code goes here
	fmt.Println(cakes[0].weight)
	// Checkpoint 3 code goes here
	cakes[1].weight = 1500
	fmt.Println(cakes)

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Nested Structs
----------------
When we have complex groups of fields in our structs, they can be combined into their own struct! For example, in the Employee struct, we have two separate fields for the first and last 
name of the employee. We can combine those two strings into their own struct called Name:

type Name struct{
  firstName string
  lastName string
}

type Employee struct{
  name Name
  age int
  title string
}

We create an instance of Employee like so:

carl := Employee{Name{“Carl”, “Carlson”}, 32, “Engineer”}

To access the fields of the nested struct (Name in this case), we chain together the field accesses like so:

fmt.Println(carl.name.lastName) // Output will be “Carlson”

We can also define the employee struct with the Name struct anonymously like so:

type Employee struct{
  Name
  age int
  title string
}

Notice how the Name file has no associated variable name with it.

Composing a struct in this way allows us to access the firstName and lastName fields directly from the Employee struct.

carl := Employee{Name{“Carl”, “Carlson”}, 32, “Engineer”}

fmt.Println(carl.firstName) // Output will be “Carl”
fmt.Println(carl.lastName) // Output will be “Carlson”

We, of course, cannot have two anonymous fields of the same type (i.e., two Name fields) as that would make it impossible to tell which field is being accessed (which firstName if two 
anonymous Name fields).

An anonymous field is used to field access easier and leads to cleaner code.

We now have the ability to organize struct information inside of existing structs! Let’s get some hands-on practice.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a struct called Circle that will contain the following two fields: point of type Point radius of type int

The point field represents the x and y coordinates of the center of the circle


Hint
A struct can contain other structs as fields.

Recall the Employee struct:

type Name struct {
  firstName string
  lastName string
}

type Employee struct {
  name Name
  age int
  title string
}

Checkpoint 2 Passed
2.
Print the x coordinate of the instance of Circle called circle.


Hint
Recall that to access the lastName field of the Employee, you would have to access the name field, then access the lastName field.

type Name struct{
  firstName string
  lastName string
}

type Employee struct{
  name Name
  age int
  title string
}

fmt.Println(carl.name.lastName) // Output will be “Carlson”

Checkpoint 3 Passed
3.
Inside the Circle struct, make the Point field anonymous.

Now that there is no point field by name you will need to modify the access you added in the last checkpoint.


Hint
Recall that an anonymous field does not have a name. You will need to access the field of the enclosed structure directly. Example:

type Employee struct {
  Name
  age int
  title string
}

carl := Employee{Name{“Carl”, “Carlson”}, 32, “Engineer”}

fmt.Println(carl.firstName) // Output will be “Carl”

structs.go
----------
package main

import "fmt"

type Point struct {
	x int
	y int
}

// Checkpoint 1 goes here
type Circle struct {
  Point
  radius int
}

func main() {
	circle := Circle{Point{4,5}, 2}
	
// Checkpoint 2 code goes here
  fmt.Println(circle.x)
	
  fmt.Println(circle)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
Good job on completing the module on struct in Go! You now have a strong understanding of how to create and use structs. Let’s review everything we went over.

A group of related variables can be defined as a struct. Each variable within a struct is known as a field.

A struct must be defined before it can be used in a program. The definition of a struct includes its name and its fields.


type Point struct{
  x int
  y int
}

An instance of a defined struct can be created by providing its name followed by a set of curly braces with optional values.

p1 := Point{x: 10, y: 12}

Fields within a struct can be accessed or modified using the . operator.

p1 := Point{x:10, y:12}
fmt.Println(p1.x)

Methods can be associated with a struct by naming a struct parameter in parentheses before the function name.

func (rectangle Rectangle) area()  float32{
  return rectangle.length * rectangle.height
}

func main() {
  rect.area()
}

The values of a struct can only be modified in a function if the struct is passed as a pointer.

func (rectangle *Rectangle) modify(newLength float32){
  rectangle.length = newLength
}

Accessing the fields of a pointer to a struct does not require dereferencing. The fields of the struct pointer can be accessed using the normal . syntax.

steve := Employee{“Steve”, “Stevens”, 34, “Junior Manager”}
pointerToSteve := &steve
fmt.Println(pointerToSteve.firstName)

Arrays can be used to store many of the same struct’s instances.

points := []Point{{1, 1}, {7, 27}, {12, 7}, {9, 25}}

A struct can contain fields that are themselves other structs.

type Name struct{
  firstName string
  lastName string
}

type Employee struct{
  name Name
  age int
  title string
}

Congratulations on finishing the lesson. Now that you understand structs, you can use them to define custom collections of variables in your programs!

structs.go
----------
package main

import "fmt"

type Car struct{
	make string
	model string
	year int
}

func main() {
	// You can experiment with the Car struct if you wish. 
}














































































































































































