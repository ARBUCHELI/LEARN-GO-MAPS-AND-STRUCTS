# PROJECT
---------

* Stock Market
--------------
In this project, we will represent a stock market in the Go language. We will create the following:

	. A struct that represents a stock.

	. A slice of Stock structs that will represent a stock market.

	. A function that displays the stock market (stock names and prices).

	. A function to randomly move a stock’s price up or down.

	. A main which tests our functionality.

Let’s get started!

* Stock Creation
----------------
1.
Create a struct called Stock which contains the following fields:

	. name: string
	. price: float32

Hint
Consider the Point struct that contains two fields: x and y. It is defined in the following way:

type Point struct {
    x int
    y int
}

* Updating a Stock
------------------
2.
Define a function called updateStock() that updates the value of a stock. This function belongs to the Stock struct. Keep the function body empty for now; we will fill it in later.


Hint
Remember, since this function is updating a struct, the struct must be passed in by reference. Here is an example:

func (rect *Rectangle) increaseHeight() {
    rect.height += 1
}

3.
Inside the body of the updateStock() function, use the randomNumberGen() function to generate a random number between -10,000 and 10,000. Assign this random number to a variable called 
change.


Hint
Notice the randomNumberGen() function accepts two parameters: a min and a max. Call this function while passing in the proper minimum and maximum values.

4.
Add the value of change to the price of the stock.


Hint
We can modify the value of a struct field like so:

point.x = 19

* Defining the `displayMarket()` function
-----------------------------------------
5.
Create an empty function called displayMarket() that accepts only one parameter: a slice of Stocks called market.


Hint
Recall a function is defined like so:

func someFunc(param1 int, param2 string) returnType {

    // Function body
}

A slice parameter is defined like so: []variableType where variableType could be an int or a string, or a struct, etc…

6.
Inside the displayMarket() function, loop through the market and print each Stock.


Hint
You would use a for loop like so:

for i := 0; i < len(someSlice); i++ {
    // Loop body
}

Inside the loop body, you would print the Stock name and price.

* Experimenting with the `Stock` class and functions
----------------------------------------------------
7.
Each of the following steps will take place inside of main.

First, create a slice of Stocks called stockMarket and populate it with Stock values. Example values might include:

	. GOOG: 2,313.50

	. AAPL: 157.28

	. FB: 203.77

	. TWTR: 50.00

Hint
A slice of structs is created like so:

type Point struct {
    x int
    y int
}

points := []Point{{1, 7}, {9, 6}, {0, 0}, {7, 2}}

8.
Print the current state of the market using the displayMarket function.


Hint
To do this, you would use the displayMarket() function.

9.
Update any of the stocks of your choosing.


Hint
To do this, you would use the updateStock() function on a reference to a Stock. This syntax looks similar to:

employees[0].promote()

10.
Print the state of the market again.


Hint
To do this, you would use the displayMarket() function.

stockMarket.go
--------------package main

import (
	"fmt"
	"math/rand"
	"time"
)
func randomNumberGen(min float32, max float32) float32 {	
	return min + (max-min)*rand.Float32()
}
// Task implementation goes here
type Stock struct {
  name string
  price float32
}

func (s *Stock) updateStock()  {
  change := randomNumberGen(-10000, 10000)
  s.price += change
}

func displayMarket(market []Stock) {
  for i:=0; i<len(market); i++ {
    fmt.Println(market[i])
  }
}

func main() {
  rand.Seed(time.Now().UnixNano())
	// Function calls go here
  GOOG := Stock{"GOOG", 2313.50}
  AAPL := Stock{"AAPL", 157.28}
  FB := Stock{"FB", 203.77}
  TWTR := Stock{"TWTR", 50.00}

  stockMarket := []Stock{GOOG, AAPL, FB, TWTR}

  displayMarket(stockMarket)

  stockMarket[0].updateStock()
  stockMarket[1].updateStock()

  displayMarket(stockMarket)
}


